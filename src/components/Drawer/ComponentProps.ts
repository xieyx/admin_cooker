export default {
  Input: {
    addonAfter: ['<p>带标签的 input，设置后置标签</p>\n', 'ReactNode', '', ''],
    addonBefore: ['<p>带标签的 input，设置前置标签</p>\n', 'ReactNode', '', ''],
    allowClear: ['<p>可以点击清除图标删除内容</p>\n', 'boolean', '', ''],
    bordered: ['<p>是否有边框</p>\n', 'boolean', true, '4.5.0'],
    defaultValue: ['<p>输入框默认内容</p>\n', 'string', '', ''],
    disabled: ['<p>是否禁用状态，默认为 false</p>\n', 'boolean', false, ''],
    id: ['<p>输入框的 id</p>\n', 'string', '', ''],
    maxLength: ['<p>最大长度</p>\n', 'number', '', ''],
    prefix: ['<p>带有前缀图标的 input</p>\n', 'ReactNode', '', ''],
    size: [
      '<p>控件大小。注：标准表单内的输入框大小限制为 <code>large</code></p>\n',
      '`large` | `middle` | `small`',
      '',
      '',
    ],
    suffix: ['<p>带有后缀图标的 input</p>\n', 'ReactNode', '', ''],
    type: [
      '<p>声明 input 类型，同原生 input 标签的 type 属性，见：<a target="__blank" href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input#%E5%B1%9E%E6%80%A7">MDN</a>(请直接使用 <code>Input.TextArea</code> 代替 <code>type=&quot;textarea&quot;</code>)</p>\n',
      'string',
      'text',
      '',
    ],
    value: ['<p>输入框内容</p>\n', 'string', '', ''],
    onChange: ['<p>输入框内容变化时的回调</p>\n', 'function(e)', '', ''],
    onPressEnter: ['<p>按下回车的回调</p>\n', 'function(e)', '', ''],
  },
  'Input.TextArea': {
    allowClear: ['<p>可以点击清除图标删除内容</p>\n', 'boolean', false, ''],
    autoSize: [
      '<p>自适应内容高度，可设置为 true | false 或对象：{ minRows: 2, maxRows: 6 }</p>\n',
      'boolean | object',
      false,
      '',
    ],
    bordered: ['<p>是否有边框</p>\n', 'boolean', true, '4.5.0'],
    countFormatter: [
      '<p>指定字数展示的格式</p>\n',
      '(count: number, maxLength?: number) => string',
      '',
      '4.10.0',
    ],
    defaultValue: ['<p>输入框默认内容</p>\n', 'string', '', ''],
    maxLength: ['<p>内容最大长度</p>\n', 'number', '', '4.7.0'],
    showCount: [
      '<p>是否展示字数</p>\n',
      'boolean | { formatter: ({ count: number, maxLength?: number }) => string }',
      false,
      '4.7.0 (formatter: 4.10.0)',
    ],
    value: ['<p>输入框内容</p>\n', 'string', '', ''],
    onPressEnter: ['<p>按下回车的回调</p>\n', 'function(e)', '', ''],
    onResize: ['<p>resize 回调</p>\n', 'function({ width, height })', '', ''],
  },
  'Input.Search': {
    enterButton: [
      '<p>是否有确认按钮，可设为按钮文字。该属性会与 <code>addonAfter</code> 冲突。</p>\n',
      'boolean | ReactNode',
      false,
    ],
    loading: ['<p>搜索 loading</p>\n', 'boolean', false],
    onSearch: [
      '<p>点击搜索图标、清除图标，或按下回车键时的回调</p>\n',
      'function(value, event)',
      '',
    ],
  },
  'Input.Group': {
    compact: ['<p>是否用紧凑模式</p>\n', 'boolean', false],
    size: [
      '<p><code>Input.Group</code> 中所有的 <code>Input</code> 的大小，可选 <code>large</code> <code>default</code> <code>small</code></p>\n',
      'string',
      'default',
    ],
  },
  'Input.Password': {
    iconRender: ['<p>自定义切换按钮</p>\n', '(visible) => ReactNode', null, '4.3.0'],
    visibilityToggle: ['<p>是否显示切换按钮</p>\n', 'boolean', true, ''],
  },
  InputNumber: {
    autoFocus: ['<p>自动获取焦点</p>\n', 'boolean', false, '-'],
    bordered: ['<p>是否有边框</p>\n', 'boolean', true, '4.12.0'],
    decimalSeparator: ['<p>小数点</p>\n', 'string', '', '-'],
    defaultValue: ['<p>初始值</p>\n', 'number', '', '-'],
    disabled: ['<p>禁用</p>\n', 'boolean', false, '-'],
    formatter: [
      '<p>指定输入框展示值的格式</p>\n',
      'function(value: number | string): string',
      '',
      '-',
    ],
    keyboard: ['<p>是否启用键盘快捷行为</p>\n', 'boolean', true, '4.12.0'],
    max: ['<p>最大值</p>\n', 'number', null, '-'],
    min: ['<p>最小值</p>\n', 'number', null, '-'],
    parser: [
      '<p>指定从 <code>formatter</code> 里转换回数字的方式，和 <code>formatter</code> 搭配使用</p>\n',
      'function(string): number',
      '',
      '-',
    ],
    precision: ['<p>数值精度</p>\n', 'number', '', '-'],
    readOnly: ['<p>只读</p>\n', 'boolean', false, '-'],
    size: ['<p>输入框大小</p>\n', '`large` | `middle` | `small`', '', '-'],
    step: ['<p>每次改变步数，可以为小数</p>\n', 'number | string', 1, '-'],
    value: ['<p>当前值</p>\n', 'number', '', '-'],
    onChange: ['<p>变化回调</p>\n', 'function(value: number | string | null)', '', '-'],
    onPressEnter: ['<p>按下回车的回调</p>\n', 'function(e)', '', '-'],
    onStep: [
      '<p>点击上下箭头的回调</p>\n',
      "(value: number, info: { offset: number, type: 'up' | 'down' }) => void",
      '',
      '4.7.0',
    ],
  },
  Switch: {
    autoFocus: ['<p>组件自动获取焦点</p>\n', 'boolean', false],
    checked: ['<p>指定当前是否选中</p>\n', 'boolean', false],
    checkedChildren: ['<p>选中时的内容</p>\n', 'ReactNode', ''],
    className: ['<p>Switch 器类名</p>\n', 'string', ''],
    defaultChecked: ['<p>初始是否选中</p>\n', 'boolean', false],
    disabled: ['<p>是否禁用</p>\n', 'boolean', false],
    loading: ['<p>加载中的开关</p>\n', 'boolean', false],
    size: [
      '<p>开关大小，可选值：<code>default</code> <code>small</code></p>\n',
      'string',
      'default',
    ],
    unCheckedChildren: ['<p>非选中时的内容</p>\n', 'ReactNode', ''],
    onChange: ['<p>变化时回调函数</p>\n', 'function(checked: boolean, event: Event)', ''],
    onClick: ['<p>点击时回调函数</p>\n', 'function(checked: boolean, event: Event)', ''],
  },
  Radio: {
    'blur()': ['<p>移除焦点</p>\n'],
    'focus()': ['<p>获取焦点</p>\n'],
  },
  'Radio.Button': {
    autoFocus: ['<p>自动获取焦点</p>\n', 'boolean', false],
    checked: ['<p>指定当前是否选中</p>\n', 'boolean', false],
    defaultChecked: ['<p>初始是否选中</p>\n', 'boolean', false],
    disabled: ['<p>禁用 Radio</p>\n', 'boolean', false],
    value: ['<p>根据 value 进行比较，判断是否选中</p>\n', 'any', ''],
  },
  'Radio.Group': {
    buttonStyle: [
      '<p>RadioButton 的风格样式，目前有描边和填色两种风格</p>\n',
      '`outline` | `solid`',
      'outline',
      '',
      '',
    ],
    defaultValue: ['<p>默认选中的值</p>\n', 'any', '', '', ''],
    disabled: ['<p>禁选所有子单选器</p>\n', 'boolean', false, '', ''],
    name: [
      '<p>RadioGroup 下所有 <code>input[type=&quot;radio&quot;]</code> 的 <code>name</code> 属性</p>\n',
      'string',
      '',
      '',
      '',
    ],
    options: [
      '<p>以配置形式设置子元素</p>\n',
      'string[] | Array&lt;{ label: string value: string disabled?: boolean }>',
      '',
      '',
      '',
    ],
    optionType: [
      '<p>用于设置 Radio <code>options</code> 类型</p>\n',
      '`default` | `button`',
      'default',
      '4.4.0',
      '',
    ],
    size: ['<p>大小，只对按钮样式生效</p>\n', '`large` | `middle` | `small`', '', '', ''],
    value: ['<p>用于设置当前选中的值</p>\n', 'any', '', '', ''],
    onChange: ['<p>选项变化时的回调函数</p>\n', 'function(e:Event)', '', '', ''],
  },
  DatePicker: {
    allowClear: ['<p>是否显示清除按钮</p>\n', 'boolean', true, ''],
    autoFocus: ['<p>自动获取焦点</p>\n', 'boolean', false, ''],
    bordered: ['<p>是否有边框</p>\n', 'boolean', true, ''],
    className: ['<p>选择器 className</p>\n', 'string', '', ''],
    dateRender: [
      '<p>自定义日期单元格的内容</p>\n',
      'function(currentDate: moment, today: moment) => React.ReactNode',
      '',
      '',
    ],
    disabled: ['<p>禁用</p>\n', 'boolean', false, ''],
    disabledDate: ['<p>不可选择的日期</p>\n', '(currentDate: moment) => boolean', '', ''],
    dropdownClassName: ['<p>额外的弹出日历 className</p>\n', 'string', '', ''],
    getPopupContainer: [
      '<p>定义浮层的容器，默认为 body 上新建 div</p>\n',
      'function(trigger)',
      '',
      '',
    ],
    inputReadOnly: [
      '<p>设置输入框为只读（避免在移动设备上打开虚拟键盘）</p>\n',
      'boolean',
      false,
      '',
    ],
    locale: ['<p>国际化配置</p>\n', 'object', null, ''],
    mode: [
      '<p>日期面板的状态（<a target="__blank" href="https://ant.design/docs/react/faq#%E5%BD%93%E6%88%91%E6%8C%87%E5%AE%9A%E4%BA%86-DatePicker/RangePicker-%E7%9A%84-mode-%E5%B1%9E%E6%80%A7%E5%90%8E%EF%BC%8C%E7%82%B9%E5%87%BB%E5%90%8E%E6%97%A0%E6%B3%95%E9%80%89%E6%8B%A9%E5%B9%B4%E4%BB%BD/%E6%9C%88%E4%BB%BD%EF%BC%9F">设置后无法选择年份/月份？</a>）</p>\n',
      '`time` | `date` | `month` | `year` | `decade`',
      '',
      '',
    ],
    open: ['<p>控制弹层是否展开</p>\n', 'boolean', '', ''],
    panelRender: ['<p>自定义渲染面板</p>\n', '(panelNode) => ReactNode', '', '4.5.0'],
    picker: [
      '<p>设置选择器类型</p>\n',
      '`date` | `week` | `month` | `quarter` | `year`',
      'date',
      '`quarter`: 4.1.0',
    ],
    placeholder: ['<p>输入框提示文字</p>\n', 'string | [string, string]', '', ''],
    popupStyle: ['<p>额外的弹出日历样式</p>\n', 'CSSProperties', '{}', ''],
    size: [
      '<p>输入框大小，<code>large</code> 高度为 40px，<code>small</code> 为 24px，默认是 32px</p>\n',
      '`large` | `middle` | `small`',
      '',
      '',
    ],
    style: ['<p>自定义输入框样式</p>\n', 'CSSProperties', '{}', ''],
    suffixIcon: ['<p>自定义的选择框后缀图标</p>\n', 'ReactNode', '', ''],
    onOpenChange: ['<p>弹出日历和关闭日历的回调</p>\n', 'function(open)', '', ''],
    onPanelChange: ['<p>日期面板变化时的回调</p>\n', 'function(value, mode)', '', ''],
    defaultPickerValue: ['<p>默认面板日期</p>\n', '[moment](http://momentjs.com/)', '', ''],
    defaultValue: [
      '<p>默认日期，如果开始时间或结束时间为 <code>null</code> 或者 <code>undefined</code>，日期范围将是一个开区间</p>\n',
      '[moment](http://momentjs.com/)',
      '',
      '',
    ],
    disabledTime: ['<p>不可选择的时间</p>\n', 'function(date)', '', ''],
    format: [
      '<p>设置日期格式，为数组时支持多格式匹配，展示以第一个为准。配置参考 <a target="__blank" href="http://momentjs.com/">moment.js</a>，支持<a target="__blank" href="https://ant.design/components/date-picker-cn#components-date-picker-demo-format">自定义格式</a></p>\n',
      'string | (value: moment) => string | (string | (value: moment) => string)[]',
      'YYYY-MM-DD',
      '',
    ],
    renderExtraFooter: ['<p>在面板中添加额外的页脚</p>\n', '(mode) => React.ReactNode', '', ''],
    showNow: [
      '<p>当设定了 <code>showTime</code> 的时候，面板是否显示“此刻”按钮</p>\n',
      'boolean',
      '',
      '4.4.0',
    ],
    showTime: ['<p>增加时间选择功能</p>\n', 'Object | boolean', null, ''],
    'showTime.defaultValue': [
      '<p>设置用户选择日期时默认的时分秒，<a target="__blank" href="https://ant.design/components/date-picker-cn#components-date-picker-demo-disabled-date">例子</a></p>\n',
      '[moment](http://momentjs.com/)',
      null,
      '',
    ],
    showToday: ['<p>是否展示“今天”按钮</p>\n', 'boolean', true, ''],
    value: ['<p>日期</p>\n', '[moment](http://momentjs.com/)', '', ''],
    onChange: ['<p>时间发生变化的回调</p>\n', 'function(date: moment, dateString: string)', '', ''],
    onOk: ['<p>点击确定按钮的回调</p>\n', 'function()', '', ''],
  },
  'DatePicker.RangePicker': {
    allowClear: ['<p>是否显示清除按钮</p>\n', 'boolean', true, ''],
    autoFocus: ['<p>自动获取焦点</p>\n', 'boolean', false, ''],
    bordered: ['<p>是否有边框</p>\n', 'boolean', true, ''],
    className: ['<p>选择器 className</p>\n', 'string', '', ''],
    dateRender: [
      '<p>自定义日期单元格的内容。<code>info</code> 参数自 4.3.0 添加</p>\n',
      'function(currentDate: moment, today: moment, info: { range: `start` | `end` }) => React.ReactNode',
      '',
      '',
    ],
    disabled: ['<p>禁用起始项</p>\n', '[boolean, boolean]', '', ''],
    disabledDate: ['<p>不可选择的日期</p>\n', '(currentDate: moment) => boolean', '', ''],
    dropdownClassName: ['<p>额外的弹出日历 className</p>\n', 'string', '', ''],
    getPopupContainer: [
      '<p>定义浮层的容器，默认为 body 上新建 div</p>\n',
      'function(trigger)',
      '',
      '',
    ],
    inputReadOnly: [
      '<p>设置输入框为只读（避免在移动设备上打开虚拟键盘）</p>\n',
      'boolean',
      false,
      '',
    ],
    locale: ['<p>国际化配置</p>\n', 'object', null, ''],
    mode: [
      '<p>日期面板的状态（<a target="__blank" href="https://ant.design/docs/react/faq#%E5%BD%93%E6%88%91%E6%8C%87%E5%AE%9A%E4%BA%86-DatePicker/RangePicker-%E7%9A%84-mode-%E5%B1%9E%E6%80%A7%E5%90%8E%EF%BC%8C%E7%82%B9%E5%87%BB%E5%90%8E%E6%97%A0%E6%B3%95%E9%80%89%E6%8B%A9%E5%B9%B4%E4%BB%BD/%E6%9C%88%E4%BB%BD%EF%BC%9F">设置后无法选择年份/月份？</a>）</p>\n',
      '`time` | `date` | `month` | `year` | `decade`',
      '',
      '',
    ],
    open: ['<p>控制弹层是否展开</p>\n', 'boolean', '', ''],
    panelRender: ['<p>自定义渲染面板</p>\n', '(panelNode) => ReactNode', '', '4.5.0'],
    picker: [
      '<p>设置选择器类型</p>\n',
      '`date` | `week` | `month` | `quarter` | `year`',
      'date',
      '`quarter`: 4.1.0',
    ],
    placeholder: ['<p>输入框提示文字</p>\n', 'string | [string, string]', '', ''],
    popupStyle: ['<p>额外的弹出日历样式</p>\n', 'CSSProperties', '{}', ''],
    size: [
      '<p>输入框大小，<code>large</code> 高度为 40px，<code>small</code> 为 24px，默认是 32px</p>\n',
      '`large` | `middle` | `small`',
      '',
      '',
    ],
    style: ['<p>自定义输入框样式</p>\n', 'CSSProperties', '{}', ''],
    suffixIcon: ['<p>自定义的选择框后缀图标</p>\n', 'ReactNode', '', ''],
    onOpenChange: ['<p>弹出日历和关闭日历的回调</p>\n', 'function(open)', '', ''],
    onPanelChange: ['<p>日历面板切换的回调</p>\n', 'function(value, mode)', '', ''],
    allowEmpty: ['<p>允许起始项部分为空</p>\n', '[boolean, boolean]', null, ''],
    defaultPickerValue: ['<p>默认面板日期</p>\n', '[moment](http://momentjs.com/)[]', '', ''],
    defaultValue: ['<p>默认日期</p>\n', '[moment](http://momentjs.com/)[]', '', ''],
    disabledTime: [
      '<p>不可选择的时间</p>\n',
      'function(date: moment, partial: `start` | `end`)',
      '',
      '',
    ],
    format: ['<p>展示的日期格式</p>\n', 'string', 'YYYY-MM-DD HH:mm:ss', ''],
    ranges: [
      '<p>预设时间范围快捷选择</p>\n',
      '{ [range: string]: [moment](http://momentjs.com/)[] } | { [range: string]: () => [moment](http://momentjs.com/)[] }',
      '',
      '',
    ],
    renderExtraFooter: ['<p>在面板中添加额外的页脚</p>\n', '() => React.ReactNode', '', ''],
    separator: ['<p>设置分隔符</p>\n', 'string', '~', ''],
    showTime: ['<p>增加时间选择功能</p>\n', 'Object|boolean', null, ''],
    'showTime.defaultValue': [
      '<p>设置用户选择日期时默认的时分秒，<a target="__blank" href="https://ant.design/components/date-picker-cn#components-date-picker-demo-disabled-date">例子</a></p>\n',
      '[moment](http://momentjs.com/)[]',
      null,
      '',
    ],
    value: ['<p>日期</p>\n', '[moment](http://momentjs.com/)[]', '', ''],
    onCalendarChange: [
      '<p>待选日期发生变化的回调。<code>info</code> 参数自 4.4.0 添加</p>\n',
      'function(dates: [moment, moment], dateStrings: [string, string], info: { range:`start`|`end` })',
      '',
      '',
    ],
    onChange: [
      '<p>日期范围发生变化的回调</p>\n',
      'function(dates: [moment, moment], dateStrings: [string, string])',
      '',
      '',
    ],
  },
  TimePicker: {
    allowClear: ['<p>是否展示清除按钮</p>\n', 'boolean', true, ''],
    autoFocus: ['<p>自动获取焦点</p>\n', 'boolean', false, ''],
    bordered: ['<p>是否有边框</p>\n', 'boolean', true, ''],
    className: ['<p>选择器类名</p>\n', 'string', '', ''],
    clearIcon: ['<p>自定义的清除图标</p>\n', 'ReactNode', '', ''],
    clearText: ['<p>清除按钮的提示文案</p>\n', 'string', null, ''],
    defaultValue: ['<p>默认时间</p>\n', '[moment](http://momentjs.com/)', '', ''],
    disabled: ['<p>禁用全部操作</p>\n', 'boolean', false, ''],
    disabledHours: ['<p>禁止选择部分小时选项</p>\n', 'function()', '', ''],
    disabledMinutes: ['<p>禁止选择部分分钟选项</p>\n', 'function(selectedHour)', '', ''],
    disabledSeconds: [
      '<p>禁止选择部分秒选项</p>\n',
      'function(selectedHour, selectedMinute)',
      '',
      '',
    ],
    format: ['<p>展示的时间格式</p>\n', 'string', 'HH:mm:ss', ''],
    getPopupContainer: [
      '<p>定义浮层的容器，默认为 body 上新建 div</p>\n',
      'function(trigger)',
      '',
      '',
    ],
    hideDisabledOptions: ['<p>隐藏禁止选择的选项</p>\n', 'boolean', false, ''],
    hourStep: ['<p>小时选项间隔</p>\n', 'number', 1, ''],
    inputReadOnly: [
      '<p>设置输入框为只读（避免在移动设备上打开虚拟键盘）</p>\n',
      'boolean',
      false,
      '',
    ],
    minuteStep: ['<p>分钟选项间隔</p>\n', 'number', 1, ''],
    open: ['<p>面板是否打开</p>\n', 'boolean', '', ''],
    placeholder: ['<p>没有值的时候显示的内容</p>\n', 'string | [string, string]', '请选择时间', ''],
    popupClassName: ['<p>弹出层类名</p>\n', 'string', '', ''],
    popupStyle: ['<p>弹出层样式对象</p>\n', 'object', '', ''],
    renderExtraFooter: ['<p>选择框底部显示自定义的内容</p>\n', '() => ReactNode', '', ''],
    secondStep: ['<p>秒选项间隔</p>\n', 'number', 1, ''],
    showNow: ['<p>面板是否显示“此刻”按钮</p>\n', 'boolean', '', '4.4.0'],
    suffixIcon: ['<p>自定义的选择框后缀图标</p>\n', 'ReactNode', '', ''],
    use12Hours: [
      '<p>使用 12 小时制，为 true 时 <code>format</code> 默认为 <code>h:mm:ss a</code></p>\n',
      'boolean',
      false,
      '',
    ],
    value: ['<p>当前时间</p>\n', '[moment](http://momentjs.com/)', '', ''],
    onChange: [
      '<p>时间发生变化的回调</p>\n',
      'function(time: moment, timeString: string): void',
      '',
      '',
    ],
    onOpenChange: ['<p>面板打开/关闭时的回调</p>\n', '(open: boolean) => void', '', ''],
  },
  'TimePicker.RangePicker': {
    order: ['<p>始末时间是否自动排序</p>\n', 'boolean', true, '4.1.0'],
  },
  Select: {
    allowClear: ['<p>支持清除</p>\n', 'boolean', false, ''],
    autoClearSearchValue: [
      '<p>是否在选中项后清空搜索框，只在 <code>mode</code> 为 <code>multiple</code> 或 <code>tags</code> 时有效</p>\n',
      'boolean',
      true,
      '',
    ],
    autoFocus: ['<p>默认获取焦点</p>\n', 'boolean', false, ''],
    bordered: ['<p>是否有边框</p>\n', 'boolean', true, ''],
    clearIcon: ['<p>自定义的多选框清空图标</p>\n', 'ReactNode', '', ''],
    defaultActiveFirstOption: ['<p>是否默认高亮第一个选项</p>\n', 'boolean', true, ''],
    defaultOpen: ['<p>是否默认展开下拉菜单</p>\n', 'boolean', '', ''],
    defaultValue: [
      '<p>指定默认选中的条目</p>\n',
      'string | string[]<br />number | number[]<br />LabeledValue | LabeledValue[]',
      '',
      '',
    ],
    disabled: ['<p>是否禁用</p>\n', 'boolean', false, ''],
    dropdownClassName: ['<p>下拉菜单的 className 属性</p>\n', 'string', '', ''],
    dropdownMatchSelectWidth: [
      '<p>下拉菜单和选择器同宽。默认将设置 <code>min-width</code>，当值小于选择框宽度时会被忽略。false 时会关闭虚拟滚动</p>\n',
      'boolean | number',
      true,
      '',
    ],
    dropdownRender: ['<p>自定义下拉框内容</p>\n', '(originNode: ReactNode) => ReactNode', '', ''],
    dropdownStyle: ['<p>下拉菜单的 style 属性</p>\n', 'CSSProperties', '', ''],
    filterOption: [
      '<p>是否根据输入项进行筛选。当其为一个函数时，会接收 <code>inputValue</code> <code>option</code> 两个参数，当 <code>option</code> 符合筛选条件时，应返回 true，反之则返回 false</p>\n',
      'boolean | function(inputValue, option)',
      true,
      '',
    ],
    filterSort: [
      '<p>搜索时对筛选结果项的排序函数, 类似<a target="__blank" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort">Array.sort</a>里的 compareFunction</p>\n',
      '(optionA: Option, optionB: Option) => number',
      '',
      '4.9.0',
    ],
    getPopupContainer: [
      '<p>菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。<a target="__blank" href="https://codesandbox.io/s/4j168r7jw0">示例</a></p>\n',
      'function(triggerNode)',
      null,
      '',
    ],
    labelInValue: [
      '<p>是否把每个选项的 label 包装到 value 中，会把 Select 的 value 类型从 <code>string</code> 变为 { value: string, label: ReactNode } 的格式</p>\n',
      'boolean',
      false,
      '',
    ],
    listHeight: ['<p>设置弹窗滚动高度</p>\n', 'number', 256, ''],
    loading: ['<p>加载中状态</p>\n', 'boolean', false, ''],
    maxTagCount: [
      '<p>最多显示多少个 tag，响应式模式会对性能产生损耗</p>\n',
      'number | `responsive`',
      '',
      'responsive: 4.10',
    ],
    maxTagPlaceholder: [
      '<p>隐藏 tag 时显示的内容</p>\n',
      'ReactNode | function(omittedValues)',
      '',
      '',
    ],
    maxTagTextLength: ['<p>最大显示的 tag 文本长度</p>\n', 'number', '', ''],
    menuItemSelectedIcon: ['<p>自定义多选时当前选中的条目图标</p>\n', 'ReactNode', '', ''],
    mode: ['<p>设置 Select 的模式为多选或标签</p>\n', '`multiple` | `tags`', '', ''],
    notFoundContent: ['<p>当下拉列表为空时显示的内容</p>\n', 'ReactNode', 'Not Found', ''],
    open: ['<p>是否展开下拉菜单</p>\n', 'boolean', '', ''],
    optionFilterProp: [
      '<p>搜索时过滤对应的 <code>option</code> 属性，如设置为 <code>children</code> 表示对内嵌内容进行搜索。若通过 <code>options</code> 属性配置选项内容，建议设置 <code>optionFilterProp=&quot;label&quot;</code> 来对内容进行搜索。</p>\n',
      'string',
      'value',
      '',
    ],
    optionLabelProp: [
      '<p>回填到选择框的 Option 的属性值，默认是 Option 的子元素。比如在子元素需要高亮效果时，此值可以设为 <code>value</code>。<a target="__blank" href="https://codesandbox.io/s/antd-reproduction-template-tk678">示例</a></p>\n',
      'string',
      'children',
      '',
    ],
    options: [
      '<p>数据化配置选项内容，相比 jsx 定义会获得更好的渲染性能</p>\n',
      '{ label, value }[]',
      '',
      '',
    ],
    placeholder: ['<p>选择框默认文本</p>\n', 'string', '', ''],
    removeIcon: ['<p>自定义的多选框清除图标</p>\n', 'ReactNode', '', ''],
    searchValue: ['<p>控制搜索文本</p>\n', 'string', '', ''],
    showArrow: ['<p>是否显示下拉小箭头</p>\n', 'boolean', null, ''],
    showSearch: ['<p>使单选模式可搜索</p>\n', 'boolean', false, ''],
    size: ['<p>选择框大小</p>\n', '`large` | `middle` | `small`', 'middle', ''],
    suffixIcon: ['<p>自定义的选择框后缀图标</p>\n', 'ReactNode', '', ''],
    tagRender: ['<p>自定义 tag 内容 render</p>\n', '(props) => ReactNode', '', ''],
    tokenSeparators: [
      '<p>在 <code>tags</code> 和 <code>multiple</code> 模式下自动分词的分隔符</p>\n',
      'string[]',
      '',
      '',
    ],
    value: [
      '<p>指定当前选中的条目</p>\n',
      'string | string[]<br />number | number[]<br />LabeledValue | LabeledValue[]',
      '',
      '',
    ],
    virtual: ['<p>设置 false 时关闭虚拟滚动</p>\n', 'boolean', true, '4.1.0'],
    onBlur: ['<p>失去焦点时回调</p>\n', 'function', '', ''],
    onChange: [
      '<p>选中 option，或 input 的 value 变化时，调用此函数</p>\n',
      'function(value, option:Option | Array&lt;Option>)',
      '',
      '',
    ],
    onClear: ['<p>清除内容时回调</p>\n', 'function', '', '4.6.0'],
    onDeselect: [
      '<p>取消选中时调用，参数为选中项的 value (或 key) 值，仅在 <code>multiple</code> 或 <code>tags</code> 模式下生效</p>\n',
      'function(string | number | LabeledValue)',
      '',
      '',
    ],
    onDropdownVisibleChange: ['<p>展开下拉菜单的回调</p>\n', 'function(open)', '', ''],
    onFocus: ['<p>获得焦点时回调</p>\n', 'function', '', ''],
    onInputKeyDown: ['<p>按键按下时回调</p>\n', 'function', '', ''],
    onMouseEnter: ['<p>鼠标移入时回调</p>\n', 'function', '', ''],
    onMouseLeave: ['<p>鼠标移出时回调</p>\n', 'function', '', ''],
    onPopupScroll: ['<p>下拉列表滚动时的回调</p>\n', 'function', '', ''],
    onSearch: ['<p>文本框值变化时回调</p>\n', 'function(value: string)', '', ''],
    onSelect: [
      '<p>被选中时调用，参数为选中项的 value (或 key) 值</p>\n',
      'function(string | number | LabeledValue, option: Option)',
      '',
      '',
    ],
  },
  'Select.Option': {
    className: ['<p>Option 器类名</p>\n', 'string', '', ''],
    disabled: ['<p>是否禁用</p>\n', 'boolean', false, ''],
    title: ['<p>选中该 Option 后，Select 的 title</p>\n', 'string', '', ''],
    value: ['<p>默认根据此属性值进行筛选</p>\n', 'string | number', '', ''],
  },
  'Select.OptGroup': {
    key: ['<p>Key</p>\n', 'string', '', ''],
    label: ['<p>组名</p>\n', 'string | React.Element', '', ''],
  },
  Checkbox: {
    autoFocus: ['<p>自动获取焦点</p>\n', 'boolean', false, ''],
    checked: ['<p>指定当前是否选中</p>\n', 'boolean', false, ''],
    defaultChecked: ['<p>初始是否选中</p>\n', 'boolean', false, ''],
    disabled: ['<p>失效状态</p>\n', 'boolean', false, ''],
    indeterminate: ['<p>设置 indeterminate 状态，只负责样式控制</p>\n', 'boolean', false, ''],
    onChange: ['<p>变化时回调函数</p>\n', 'function(e:Event)', '', ''],
  },
  'Checkbox.Group': {
    defaultValue: ['<p>默认选中的选项</p>\n', 'string[]', null, ''],
    disabled: ['<p>整组失效</p>\n', 'boolean', false, ''],
    name: [
      '<p>CheckboxGroup 下所有 <code>input[type=&quot;checkbox&quot;]</code> 的 <code>name</code> 属性</p>\n',
      'string',
      '',
      '',
    ],
    options: ['<p>指定可选项</p>\n', 'string[] | Option[]', null, ''],
    value: ['<p>指定选中的选项</p>\n', 'string[]', null, ''],
    onChange: ['<p>变化时回调函数</p>\n', 'function(checkedValue)', '', ''],
  },
  Form: {
    colon: [
      '<p>配置 Form.Item 的 <code>colon</code> 的默认值。表示是否显示 label 后面的冒号 (只有在属性 layout 为 horizontal 时有效)</p>\n',
      'boolean',
      true,
      '',
    ],
    component: [
      '<p>设置 Form 渲染元素，为 <code>false</code> 则不创建 DOM 节点</p>\n',
      'ComponentType | false',
      null,
      '',
    ],
    fields: [
      '<p>通过状态管理（如 redux）控制表单字段，如非强需求不推荐使用。查看<a target="__blank" href="https://ant.design/components/form-cn#components-form-demo-global-state">示例</a></p>\n',
      '[FieldData](#FieldData)[]',
      '',
      '',
    ],
    form: [
      '<p>经 <code>Form.useForm()</code> 创建的 form 控制实例，不提供时会自动创建</p>\n',
      '[FormInstance](#FormInstance)',
      '',
      '',
    ],
    initialValues: ['<p>表单默认值，只有初始化以及重置时生效</p>\n', 'object', '', ''],
    labelAlign: ['<p>label 标签的文本对齐方式</p>\n', '`left` | `right`', 'right', ''],
    labelCol: [
      '<p>label 标签布局，同 <code>&lt;Col&gt;</code> 组件，设置 <code>span</code> <code>offset</code> 值，如 <code>{span: 3, offset: 12}</code> 或 <code>sm: {span: 3, offset: 12}</code></p>\n',
      '[object](/components/grid/#Col)',
      '',
      '',
    ],
    layout: ['<p>表单布局</p>\n', '`horizontal` | `vertical` | `inline`', 'horizontal', ''],
    name: ['<p>表单名称，会作为表单字段 <code>id</code> 前缀使用</p>\n', 'string', '', ''],
    preserve: ['<p>当字段被删除时保留字段值</p>\n', 'boolean', true, '4.4.0'],
    requiredMark: [
      '<p>必选样式，可以切换为必选或者可选展示样式。此为 Form 配置，Form.Item 无法单独配置</p>\n',
      'boolean | `optional`',
      true,
      '4.6.0',
    ],
    scrollToFirstError: [
      '<p>提交失败自动滚动到第一个错误字段</p>\n',
      'boolean | [Options](https://github.com/stipsan/scroll-into-view-if-needed/tree/ece40bd9143f48caf4b99503425ecb16b0ad8249#options)',
      false,
      '',
    ],
    size: ['<p>设置字段组件的尺寸（仅限 antd 组件）</p>\n', '`small` | `middle` | `large`', '', ''],
    validateMessages: [
      '<p>验证提示模板，说明<a target="__blank" href="https://ant.design/components/form-cn#validateMessages">见下</a></p>\n',
      '[ValidateMessages](https://github.com/react-component/field-form/blob/master/src/utils/messages.ts)',
      '',
      '',
    ],
    validateTrigger: ['<p>统一设置字段校验规则</p>\n', 'string | string[]', 'onChange', '4.3.0'],
    wrapperCol: [
      '<p>需要为输入控件设置布局样式时，使用该属性，用法同 labelCol</p>\n',
      '[object](/components/grid/#Col)',
      '',
      '',
    ],
    onFieldsChange: [
      '<p>字段更新时触发回调事件</p>\n',
      'function(changedFields, allFields)',
      '',
      '',
    ],
    onFinish: ['<p>提交表单且数据验证成功后回调事件</p>\n', 'function(values)', '', ''],
    onFinishFailed: [
      '<p>提交表单且数据验证失败后回调事件</p>\n',
      'function({ values, errorFields, outOfDate })',
      '',
      '',
    ],
    onValuesChange: [
      '<p>字段值更新时触发回调事件</p>\n',
      'function(changedValues, allValues)',
      '',
      '',
    ],
  },
  'Form.Item': {
    colon: [
      '<p>配合 <code>label</code> 属性使用，表示是否显示 <code>label</code> 后面的冒号</p>\n',
      'boolean',
      true,
      '',
    ],
    dependencies: [
      '<p>设置依赖字段，说明<a target="__blank" href="https://ant.design/components/form-cn#dependencies">见下</a></p>\n',
      '[NamePath](#NamePath)[]',
      '',
      '',
    ],
    extra: [
      '<p>额外的提示信息，和 <code>help</code> 类似，当需要错误信息和提示文案同时出现时，可以使用这个。</p>\n',
      'ReactNode',
      '',
      '',
    ],
    getValueFromEvent: [
      '<p>设置如何将 event 的值转换成字段值</p>\n',
      '(..args: any[]) => any',
      '',
      '',
    ],
    getValueProps: ['<p>为子元素添加额外的属性</p>\n', '(value: any) => any', '', '4.2.0'],
    hasFeedback: [
      '<p>配合 <code>validateStatus</code> 属性使用，展示校验状态图标，建议只配合 Input 组件使用</p>\n',
      'boolean',
      false,
      '',
    ],
    help: ['<p>提示信息，如不设置，则会根据校验规则自动生成</p>\n', 'ReactNode', '', ''],
    hidden: ['<p>是否隐藏字段（依然会收集和校验字段）</p>\n', 'boolean', false, ''],
    htmlFor: ['<p>设置子元素 label <code>htmlFor</code> 属性</p>\n', 'string', '', ''],
    initialValue: [
      '<p>设置子元素默认值，如果与 Form 的 <code>initialValues</code> 冲突则以 Form 为准</p>\n',
      'string',
      '',
      '4.2.0',
    ],
    label: ['<p><code>label</code> 标签的文本</p>\n', 'ReactNode', '', ''],
    labelAlign: ['<p>标签文本对齐方式</p>\n', '`left` | `right`', 'right', ''],
    labelCol: [
      '<p><code>label</code> 标签布局，同 <code>&lt;Col&gt;</code> 组件，设置 <code>span</code> <code>offset</code> 值，如 <code>{span: 3, offset: 12}</code> 或 <code>sm: {span: 3, offset: 12}</code>。你可以通过 Form 的 <code>labelCol</code> 进行统一设置，，不会作用于嵌套 Item。当和 Form 同时设置时，以 Item 为准</p>\n',
      '[object](/components/grid/#Col)',
      '',
      '',
    ],
    messageVariables: ['<p>默认验证字段的信息</p>\n', 'Record&lt;string, string>', '', '4.7.0'],
    name: ['<p>字段名，支持数组</p>\n', '[NamePath](#NamePath)', '', ''],
    normalize: [
      '<p>组件获取值后进行转换，再放入 Form 中。不支持异步</p>\n',
      '(value, prevValue, prevValues) => any',
      '',
      '',
    ],
    noStyle: ['<p>为 <code>true</code> 时不带样式，作为纯字段控件使用</p>\n', 'boolean', false, ''],
    preserve: ['<p>当字段被删除时保留字段值</p>\n', 'boolean', true, '4.4.0'],
    required: ['<p>必填样式设置。如不设置，则会根据校验规则自动生成</p>\n', 'boolean', false, ''],
    rules: [
      '<p>校验规则，设置字段的校验逻辑。点击<a target="__blank" href="https://ant.design/components/form-cn#components-form-demo-basic">此处</a>查看示例</p>\n',
      '[Rule](#Rule)[]',
      '',
      '',
    ],
    shouldUpdate: [
      '<p>自定义字段更新逻辑，说明<a target="__blank" href="https://ant.design/components/form-cn#shouldUpdate">见下</a></p>\n',
      'boolean | (prevValue, curValue) => boolean',
      false,
      '',
    ],
    tooltip: [
      '<p>配置提示信息</p>\n',
      'ReactNode | [TooltipProps & { icon: ReactNode }](/components/tooltip#API)',
      '',
      '4.7.0',
    ],
    trigger: [
      '<p>设置收集字段值变更的时机。点击<a target="__blank" href="https://ant.design/components/form-cn#components-form-demo-customized-form-controls">此处</a>查看示例</p>\n',
      'string',
      'onChange',
      '',
    ],
    validateFirst: [
      '<p>当某一规则校验不通过时，是否停止剩下的规则的校验。设置 <code>parallel</code> 时会并行校验</p>\n',
      'boolean | `parallel`',
      false,
      '`parallel`: 4.5.0',
    ],
    validateStatus: [
      "<p>校验状态，如不设置，则会根据校验规则自动生成，可选：'success' 'warning' 'error' 'validating'</p>\n",
      'string',
      '',
      '',
    ],
    validateTrigger: ['<p>设置字段校验的时机</p>\n', 'string | string[]', 'onChange', ''],
    valuePropName: [
      "<p>子节点的值的属性，如 Switch 的是 'checked'。该属性为 <code>getValueProps</code> 的封装，自定义 <code>getValueProps</code> 后会失效</p>\n",
      'string',
      'value',
      '',
    ],
    wrapperCol: [
      '<p>需要为输入控件设置布局样式时，使用该属性，用法同 <code>labelCol</code>。你可以通过 Form 的 <code>wrapperCol</code> 进行统一设置，不会作用于嵌套 Item。当和 Form 同时设置时，以 Item 为准</p>\n',
      '[object](/components/grid/#Col)',
      '',
      '',
    ],
  },
  'Form.List': {
    children: [
      '<p>渲染函数</p>\n',
      '(fields: Field[], operation: { add, remove, move }, meta: { errors }) => React.ReactNode',
      '',
      '',
    ],
    initialValue: [
      '<p>设置子元素默认值，如果与 Form 的 <code>initialValues</code> 冲突则以 Form 为准</p>\n',
      'any[]',
      '',
      '4.9.0',
    ],
    name: ['<p>字段名，支持数组</p>\n', '[NamePath](#NamePath)', '', ''],
    rules: [
      '<p>校验规则，仅支持自定义规则。需要配合 <a target="__blank" href="https://ant.design/components/form-cn#Form.ErrorList">ErrorList</a> 一同使用。</p>\n',
      '{ validator, message }[]',
      '',
      '4.7.0',
    ],
  },
  'Form.ErrorList': {
    errors: ['<p>错误列表</p>\n', 'ReactNode[]', ''],
  },
  'Form.Provider': {
    onFormChange: [
      '<p>子表单字段更新时触发</p>\n',
      'function(formName: string, info: { changedFields, forms })',
      '',
    ],
    onFormFinish: [
      '<p>子表单提交时触发</p>\n',
      'function(formName: string, info: { values, forms })',
      '',
    ],
  },
  Upload: {
    accept: [
      '<p>接受上传的文件类型, 详见 <a target="__blank" href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept">input accept Attribute</a></p>\n',
      'string',
      '',
      '',
    ],
    action: ['<p>上传的地址</p>\n', 'string | (file) => Promise&lt;string>', '', ''],
    beforeUpload: [
      '<p>上传文件之前的钩子，参数为上传的文件，若返回 <code>false</code> 则停止上传。支持返回一个 Promise 对象，Promise 对象 reject 时则停止上传，resolve 时开始上传（ resolve 传入 <code>File</code> 或 <code>Blob</code> 对象则上传 resolve 传入对象）。<strong>注意：IE9 不支持该方法</strong></p>\n',
      '(file, fileList) => boolean | Promise&lt;File>',
      '',
      '',
    ],
    customRequest: [
      '<p>通过覆盖默认的上传行为，可以自定义自己的上传实现</p>\n',
      'function',
      '',
      '',
    ],
    data: [
      '<p>上传所需额外参数或返回上传额外参数的方法</p>\n',
      'object|(file) => object | Promise&lt;object>',
      '',
      '',
    ],
    defaultFileList: ['<p>默认已经上传的文件列表</p>\n', 'object[]', '', ''],
    directory: [
      '<p>支持上传文件夹（<a target="__blank" href="https://caniuse.com/#feat=input-file-directory">caniuse</a>）</p>\n',
      'boolean',
      false,
      '',
    ],
    disabled: ['<p>是否禁用</p>\n', 'boolean', false, ''],
    fileList: [
      '<p>已经上传的文件列表（受控），使用此参数时，如果遇到 <code>onChange</code> 只调用一次的问题，请参考 <a target="__blank" href="https://github.com/ant-design/ant-design/issues/2423">#2423</a></p>\n',
      '[UploadFile](#UploadFile)[]',
      '',
      '',
    ],
    headers: ['<p>设置上传的请求头部，IE10 以上有效</p>\n', 'object', '', ''],
    iconRender: [
      '<p>自定义显示 icon</p>\n',
      '(file: UploadFile, listType?: UploadListType) => ReactNode',
      '',
      '',
    ],
    isImageUrl: [
      '<p>自定义缩略图是否使用 &lt;img /&gt; 标签进行显示</p>\n',
      '(file: UploadFile) => boolean',
      null,
      '',
    ],
    itemRender: [
      '<p>自定义上传列表项</p>\n',
      '(originNode: ReactElement, file: UploadFile, fileList?: object[]) => React.ReactNode',
      '',
      '4.7.0',
    ],
    listType: [
      '<p>上传列表的内建样式，支持三种基本样式 <code>text</code>, <code>picture</code> 和 <code>picture-card</code></p>\n',
      'string',
      'text',
      '',
    ],
    method: ['<p>上传请求的 http method</p>\n', 'string', 'post', ''],
    multiple: [
      '<p>是否支持多选文件，<code>ie10+</code> 支持。开启后按住 ctrl 可选择多个文件</p>\n',
      'boolean',
      false,
      '',
    ],
    name: ['<p>发到后台的文件参数名</p>\n', 'string', 'file', ''],
    openFileDialogOnClick: ['<p>点击打开文件对话框</p>\n', 'boolean', true, ''],
    previewFile: [
      '<p>自定义文件预览逻辑</p>\n',
      '(file: File | Blob) => Promise&lt;dataURL: string>',
      '',
      '',
    ],
    progress: [
      '<p>自定义进度条样式</p>\n',
      '[ProgressProps](/components/progress/#API)（仅支持 `type="line"`）',
      null,
      '4.3.0',
    ],
    showUploadList: [
      '<p>是否展示文件列表, 可设为一个对象，用于单独设定 <code>showPreviewIcon</code>, <code>showRemoveIcon</code>, <code>showDownloadIcon</code>, <code>removeIcon</code> 和 <code>downloadIcon</code></p>\n',
      'boolean | { showPreviewIcon?: boolean, showRemoveIcon?: boolean, showDownloadIcon?: boolean, removeIcon?: ReactNode | (file: UploadFile) => ReactNode, downloadIcon?: ReactNode | (file: UploadFile) => ReactNode }',
      true,
      'function: 4.7.0',
    ],
    withCredentials: ['<p>上传请求时是否携带 cookie</p>\n', 'boolean', false, ''],
    onChange: [
      '<p>上传文件改变时的状态，详见 <a target="__blank" href="https://ant.design/components/upload-cn#onChange">onChange</a></p>\n',
      'function',
      '',
      '',
    ],
    onDownload: [
      '<p>点击下载文件时的回调，如果没有指定，则默认跳转到文件 url 对应的标签页</p>\n',
      'function(file): void',
      null,
      '',
    ],
    onPreview: ['<p>点击文件链接或预览图标时的回调</p>\n', 'function(file)', '', ''],
    onRemove: [
      '<p>点击移除文件时的回调，返回值为 false 时不移除。支持返回一个 Promise 对象，Promise 对象 resolve(false) 或 reject 时不移除</p>\n',
      'function(file): boolean | Promise',
      '',
      '',
    ],
  },
  Slider: {
    allowClear: ['<p>支持清除, 单选模式有效</p>\n', 'boolean', false, ''],
    defaultValue: [
      '<p>设置初始取值。当 <code>range</code> 为 false 时，使用 number，否则用 [number, number]</p>\n',
      'number | [number, number]',
      null,
      '',
    ],
    disabled: ['<p>值为 true 时，滑块为禁用状态</p>\n', 'boolean', false, ''],
    dots: ['<p>是否只能拖拽到刻度上</p>\n', 'boolean', false, ''],
    getTooltipPopupContainer: [
      '<p>Tooltip 渲染父节点，默认渲染到 body 上</p>\n',
      '(triggerNode) => HTMLElement',
      null,
      '',
    ],
    included: [
      '<p><code>marks</code> 不为空对象时有效，值为 true 时表示值为包含关系，false 表示并列</p>\n',
      'boolean',
      true,
      '',
    ],
    marks: [
      '<p>刻度标记，key 的类型必须为 <code>number</code> 且取值在闭区间 [min, max] 内，每个标签可以单独设置样式</p>\n',
      'object',
      null,
      '',
    ],
    max: ['<p>最大值</p>\n', 'number', 100, ''],
    min: ['<p>最小值</p>\n', 'number', 0, ''],
    range: ['<p>双滑块模式</p>\n', 'boolean | [range](#range)', false, ''],
    reverse: ['<p>反向坐标轴</p>\n', 'boolean', false, ''],
    step: [
      '<p>步长，取值必须大于 0，并且可被 (max - min) 整除。当 <code>marks</code> 不为空对象时，可以设置 <code>step</code> 为 null，此时 Slider 的可选值仅有 marks 标出来的部分</p>\n',
      'number | null',
      1,
      '',
    ],
    tipFormatter: [
      '<p>Slider 会把当前值传给 <code>tipFormatter</code>，并在 Tooltip 中显示 <code>tipFormatter</code> 的返回值，若为 null，则隐藏 Tooltip</p>\n',
      'value => ReactNode | null',
      null,
      '',
    ],
    tooltipPlacement: [
      '<p>设置 Tooltip 展示位置。参考 <a target="__blank" href="https://ant.design/components/tooltip/">Tooltip</a></p>\n',
      'string',
      '',
      '',
    ],
    tooltipVisible: [
      '<p>值为 true 时，Tooltip 将会始终显示；否则始终不显示，哪怕在拖拽及移入时</p>\n',
      'boolean',
      '',
      '',
    ],
    value: [
      '<p>设置当前取值。当 <code>range</code> 为 false 时，使用 number，否则用 [number, number]</p>\n',
      'number | [number, number]',
      '',
      '',
    ],
    vertical: ['<p>值为 true 时，Slider 为垂直方向</p>\n', 'boolean', false, ''],
    onAfterChange: [
      '<p>与 <code>onmouseup</code> 触发时机一致，把当前值作为参数传入</p>\n',
      '(value) => void',
      '',
      '',
    ],
    onChange: [
      '<p>当 Slider 的值发生改变时，会触发 onChange 事件，并把改变后的值作为参数传入</p>\n',
      '(value) => void',
      '',
      '',
    ],
  },
  Rate: {
    allowClear: ['<p>是否允许再次点击后清除</p>\n', 'boolean', true, ''],
    allowHalf: ['<p>是否允许半选</p>\n', 'boolean', false, ''],
    autoFocus: ['<p>自动获取焦点</p>\n', 'boolean', false, ''],
    character: [
      '<p>自定义字符</p>\n',
      'ReactNode | (RateProps) => ReactNode',
      null,
      'function(): 4.4.0',
    ],
    className: ['<p>自定义样式类名</p>\n', 'string', '', ''],
    count: ['<p>star 总数</p>\n', 'number', 5, ''],
    defaultValue: ['<p>默认值</p>\n', 'number', 0, ''],
    disabled: ['<p>只读，无法进行交互</p>\n', 'boolean', false, ''],
    style: ['<p>自定义样式对象</p>\n', 'CSSProperties', '', ''],
    tooltips: ['<p>自定义每项的提示信息</p>\n', 'string[]', '', ''],
    value: ['<p>当前数，受控值</p>\n', 'number', '', ''],
    onBlur: ['<p>失去焦点时的回调</p>\n', 'function()', '', ''],
    onChange: ['<p>选择时的回调</p>\n', 'function(value: number)', '', ''],
    onFocus: ['<p>获取焦点时的回调</p>\n', 'function()', '', ''],
    onHoverChange: ['<p>鼠标经过时数值变化的回调</p>\n', 'function(value: number)', '', ''],
    onKeyDown: ['<p>按键回调</p>\n', 'function(event)', '', ''],
  },
  TreeSelect: {
    allowClear: ['<p>显示清除按钮</p>\n', 'boolean', false, ''],
    autoClearSearchValue: ['<p>当多选模式下值被选择，自动清空搜索框</p>\n', 'boolean', true, ''],
    bordered: ['<p>是否显示边框</p>\n', 'boolean', true, ''],
    defaultValue: ['<p>指定默认选中的条目</p>\n', 'string | string[]', '', ''],
    disabled: ['<p>是否禁用</p>\n', 'boolean', false, ''],
    dropdownClassName: ['<p>下拉菜单的 className 属性</p>\n', 'string', '', ''],
    dropdownMatchSelectWidth: [
      '<p>下拉菜单和选择器同宽。默认将设置 <code>min-width</code>，当值小于选择框宽度时会被忽略。false 时会关闭虚拟滚动</p>\n',
      'boolean | number',
      true,
      '',
    ],
    dropdownRender: [
      '<p>自定义下拉框内容</p>\n',
      '(originNode: ReactNode, props) => ReactNode',
      '',
      '',
    ],
    dropdownStyle: ['<p>下拉菜单的样式</p>\n', 'object', '', ''],
    filterTreeNode: [
      '<p>是否根据输入项进行筛选，默认用 treeNodeFilterProp 的值作为要筛选的 TreeNode 的属性值</p>\n',
      'boolean | function(inputValue: string, treeNode: TreeNode) (函数需要返回 bool 值)',
      null,
      '',
    ],
    getPopupContainer: [
      '<p>菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。<a target="__blank" href="https://codepen.io/afc163/pen/zEjNOy?editors=0010">示例</a></p>\n',
      'function(triggerNode)',
      null,
      '',
    ],
    labelInValue: [
      '<p>是否把每个选项的 label 包装到 value 中，会把 value 类型从 <code>string</code> 变为 {value: string, label: ReactNode, halfChecked(treeCheckStrictly 时有效): string[] } 的格式</p>\n',
      'boolean',
      false,
      '',
    ],
    listHeight: ['<p>设置弹窗滚动高度</p>\n', 'number', 256, ''],
    loadData: ['<p>异步加载数据</p>\n', 'function(node)', '', ''],
    maxTagCount: [
      '<p>最多显示多少个 tag，响应式模式会对性能产生损耗</p>\n',
      'number | `responsive`',
      '',
      'responsive: 4.10',
    ],
    maxTagPlaceholder: [
      '<p>隐藏 tag 时显示的内容</p>\n',
      'ReactNode | function(omittedValues)',
      '',
      '',
    ],
    multiple: ['<p>支持多选（当设置 treeCheckable 时自动变为 true）</p>\n', 'boolean', false, ''],
    placeholder: ['<p>选择框默认文字</p>\n', 'string', '', ''],
    searchValue: [
      '<p>搜索框的值，可以通过 <code>onSearch</code> 获取用户输入</p>\n',
      'string',
      '',
      '',
    ],
    showArrow: [
      '<p>是否显示 <code>suffixIcon</code>，单选模式下默认 <code>true</code></p>\n',
      'boolean',
      '',
      '',
    ],
    showCheckedStrategy: [
      '<p>配置 <code>treeCheckable</code> 时，定义选中项回填的方式。<code>TreeSelect.SHOW_ALL</code>: 显示所有选中节点(包括父节点)。<code>TreeSelect.SHOW_PARENT</code>: 只显示父节点(当父节点下所有子节点都选中时)。 默认只显示子节点</p>\n',
      '`TreeSelect.SHOW_ALL` | `TreeSelect.SHOW_PARENT` | `TreeSelect.SHOW_CHILD`',
      'TreeSelect.SHOW_CHILD',
      '',
    ],
    showSearch: ['<p>是否支持搜索框</p>\n', 'boolean', null, ''],
    size: ['<p>选择框大小</p>\n', '`large` | `middle` | `small`', '', ''],
    suffixIcon: [
      '<p>自定义的选择框后缀图标, 多选模式下必须同时设置 <code>showArrow</code> 为 true</p>\n',
      'ReactNode',
      '',
      '',
    ],
    switcherIcon: ['<p>自定义树节点的展开/折叠图标</p>\n', 'ReactNode', '', ''],
    treeCheckable: ['<p>显示 Checkbox</p>\n', 'boolean', false, ''],
    treeCheckStrictly: [
      '<p><code>checkable</code> 状态下节点选择完全受控（父子节点选中状态不再关联），会使得 <code>labelInValue</code> 强制为 true</p>\n',
      'boolean',
      false,
      '',
    ],
    treeData: [
      '<p>treeNodes 数据，如果设置则不需要手动构造 TreeNode 节点（value 在整个树范围内唯一）</p>\n',
      'array&lt;{value, title, children, [disabled, disableCheckbox, selectable, checkable]}>',
      null,
      '',
    ],
    treeDataSimpleMode: [
      "<p>使用简单格式的 treeData，具体设置参考可设置的类型 (此时 treeData 应变为这样的数据结构: [{id:1, pId:0, value:'1', title:&quot;test1&quot;,...},...]， <code>pId</code> 是父节点的 id)</p>\n",
      'false | object&lt;{ id: string, pId: string, rootPId: string }>',
      false,
      '',
    ],
    treeDefaultExpandAll: ['<p>默认展开所有树节点</p>\n', 'boolean', false, ''],
    treeDefaultExpandedKeys: ['<p>默认展开的树节点</p>\n', 'string[]', '', ''],
    treeExpandedKeys: ['<p>设置展开的树节点</p>\n', 'string[]', '', ''],
    treeIcon: [
      '<p>是否展示 TreeNode title 前的图标，没有默认样式，如设置为 true，需要自行定义图标相关样式</p>\n',
      'boolean',
      false,
      '',
    ],
    treeNodeFilterProp: ['<p>输入项过滤对应的 treeNode 属性</p>\n', 'string', 'value', ''],
    treeNodeLabelProp: ['<p>作为显示的 prop 设置</p>\n', 'string', 'title', ''],
    value: ['<p>指定当前选中的条目</p>\n', 'string | string[]', '', ''],
    virtual: ['<p>设置 false 时关闭虚拟滚动</p>\n', 'boolean', true, '4.1.0'],
    onChange: ['<p>选中树节点时调用此函数</p>\n', 'function(value, label, extra)', '', ''],
    onDropdownVisibleChange: ['<p>展开下拉菜单的回调</p>\n', 'function(open)', '', ''],
    onSearch: ['<p>文本框值变化时回调</p>\n', 'function(value: string)', '', ''],
    onSelect: ['<p>被选中时调用</p>\n', 'function(value, node, extra)', '', ''],
    onTreeExpand: ['<p>展示节点时调用</p>\n', 'function(expandedKeys)', '', ''],
  },
};
